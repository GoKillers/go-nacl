package randombytes

import (
	"bytes"
	"github.com/google/gofuzz"
	"testing"
)

// TestRandomBytes tests if two generated byte slices are the same
func TestRandomBytesBuf(t *testing.T) {
	var a, b []byte

	for i := 0; i < 10000; i++ {
		// Give a a random size
		f := fuzz.New().NumElements(4, 20)
		f.Fuzz(&a)

		// Fill a and b with random bytes
		a = Bytes(len(a))
		b = make([]byte, len(a))
		Read(b)

		if bytes.Equal(a, b) && len(a) > 0 {
			t.Errorf("Two random byte slices are the same: %v", a)
		}
	}
}

// TestRandomBytesRandom checks if two generated integers are the same
func TestRandomBytesRandom(t *testing.T) {
	var a, b uint32

	a = Random()
	b = Random()
	if a == b {
		t.Errorf("Two random integers are the same: %v", a)
	}
}

// TestRandomBytesUniform checks if the generated bytes are below the upper bound.
func TestRandomBytesUniform(t *testing.T) {
	var upper uint32
	f := fuzz.New()

	for i := 0; i < 10000; i++ {
		// Create a random upper bound
		f.Fuzz(&upper)

		// Generate bytes
		v := Uniform(upper)

		// Check
		if v >= upper && v > 0 {
			t.Errorf("Random value %v is greater than upper boudn %v", v, upper)
		}
	}
}

// TestRandomBytesBuf checks if bytes are indeed deterministic.
// The bytes should be different with a different seed.
func TestRandomBytesBufDeterministic(t *testing.T) {
	var a, b, c []byte

	f := fuzz.New().NumElements(4, 100)

	for i := 0; i < 10000; i++ {
		seed := Bytes(SeedBytes)

		// Give a & b the same random length.
		f.Fuzz(&a)
		b = a

		ReadDeterministic(a, seed)
		Stir()
		ReadDeterministic(b, seed)

		if !bytes.Equal(a, b) {
			t.Error("Deterministic bytes are random.")
		}

		if bytes.Equal(a, c) && len(a) > 0 {
			t.Error("Deterministic bytes are the same with a different seed")
		}

		c = a
	}
}

// TestRandomBytesSetImplementation tests if the implementation switches,
// and if all functions work with the other implementation.
func TestRandomBytesSetImplementation(t *testing.T) {
	implementations := make(map[string](Implementation))
	implementations["salsa20"] = Salsa20Implementation()
	implementations["sysrandom"] = SysRandomImplementation()

	// Loop through all implementations
	for n, i := range implementations {
		SetImplementation(i)
		if ImplementationName() != n {
			t.Errorf(
				"Incorrect implementation %v should be %v",
				ImplementationName(),
				n,
			)
		}

		// Run tests for this implementation
		Stir()
		TestRandomBytesBuf(t)
		TestRandomBytesRandom(t)
		TestRandomBytesUniform(t)
		TestRandomBytesBufDeterministic(t)
		Close()
	}
}
